<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
		">

	<!-- classpath에 있는 @Componet 어노테이션을 지정한 클래스를 자동으로 Spring 빈으로 등록해준다. -->
	<context:component-scan base-package="com.learning.business" />
	<!-- 빈 클래스에서 변수에 등록된 어노테이션을 활성화 한다. e.g: @Autowired -->
	<context:annotation-config />

	<!-- 서비스 메소드의 프로세스 시간을 측정하는 데 사용하려는 monitoring 클래스 -->
	<bean id="simplePerformanceMonitor" class="com.learning.aspect.SimplePerformanceMonitor" />

	<!-- Spring AOP -->
	<aop:config>
		<aop:aspect id="simpleMonitoring" ref="simplePerformanceMonitor">
			<!-- pointcut 정의 : Advice가 적용될 JoinPoint를 정한다.  -->
			<aop:pointcut id="businessService" expression="execution(* com.learning.business.*.*(..))" />

			<!-- 
				Around의 pointcut-ref 속성을 사용하여 미리 정의한 "businessService"을 참조한다.
				aspect가 참조하는 빈의 부가기능 메소드를 method 속성을 통해 정의한다. 
			-->
			<aop:around pointcut-ref="businessService" method="monitoring" /> 
		</aop:aspect>
	</aop:config>
</beans>